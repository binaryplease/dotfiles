* Appearance
  Removes the menu,tool and scrollbars along with the splash-screen.

  #+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-splash-screen t)
  #+END_SRC

* General Options
  Enable relative line numbers, disable the creation of file-backups when editing.

  #+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
(setq make-backup-files nil)
(setq-default display-line-numbers 'relative
    display-line-numbers-current-absolute t)
  #+END_SRC

* Packages
  Get packages from MELPA too.
  #+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")))
(package-initialize)
  #+END_SRC

  From here-on out =use-package= loads packages. We almost always want to =:ensure= packages are present.
  #+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  #+END_SRC


** Installed Packages
   The extensible vi layer for Emacs. 

*** [[https://github.com/emacs-evil/evil][evil-mode]]
    #+BEGIN_SRC emacs-lisp
(use-package evil
  :demand
  :config (progn
            (evil-mode 1)
            (define-key evil-normal-state-map (kbd ";") 'evil-ex)
	    (define-key evil-motion-state-map (kbd ":") 'evil-repeat-find-char)
            (define-key evil-visual-state-map (kbd ";") 'evil-ex)))
    #+END_SRC
    
*** [[https://github.com/cofi/evil-leader][evil-leader]]
    The package with the best name ever provides vim's leader key functinality
    #+BEGIN_SRC emacs-lisp
(use-package evil-leader
  :demand
  :config (progn
            (setq evil-leader/in-all-states t)
            (global-evil-leader-mode)))
            
(evil-leader/set-leader "`")
(setq-default indent-tabs-mode nil)
    #+END_SRC

*** [[https://github.com/Somelauw/evil-org-mode][evil-org]]
![An extensible vi layer for Emacs](https://raw.githubusercontent.com/emacs-evil/evil/master/doc/logo.png)
    #+BEGIN_SRC emacs-lisp
(use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
    #+END_SRC

*** [[https://github.com/linktohack/evil-commentary][evil-commentray]]
    Toggle comments in evil-mode
    #+BEGIN_SRC emacs-lisp
(use-package evil-commentary
  :ensure t
  :config
  (evil-commentary-mode))
    #+END_SRC

*** [[https://github.com/company-mode/company-mode][company-mode]]
Modular in-buffer completion framework for Emacs
    #+BEGIN_SRC emacs-lisp
(use-package company
  :demand
  :config (progn
            (add-hook 'prog-mode-hook #'(lambda () (company-mode)))
            (setq company-show-numbers t)))
    #+END_SRC

*** [[https://github.com/joaotavora/yasnippet][yasnippet]]
A template system for Emacs
    #+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config (progn
              (yas-global-mode 1)
              (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
              (yas-load-directory "~/.emacs.d/snippets")))

  (defun check-expansion ()
    (save-excursion
      (if (looking-at "\\_>") t
        (backward-char 1)
        (if (looking-at "\\.") t
          (backward-char 1)
          (if (looking-at "->") t nil)))))

  (defun do-yas-expand ()
    (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
        (minibuffer-complete)
      (if (or (not yas/minor-mode)
              (null (do-yas-expand)))
          (if (check-expansion)
              (company-complete-common)
            (indent-for-tab-command)))))

  (global-set-key [tab] 'tab-indent-or-complete)

    #+END_SRC

*** [[https://github.com/sabof/org-bullets][org-bullets]]
    Make the bullets in org-mode look nicer with UTF-8 characters
    #+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :demand
  :config 
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
)
    #+END_SRC

*** [[https://github.com/flycheck/flycheck][flycheck]]
On the fly syntax checking
    #+BEGIN_SRC emacs-lisp
 (use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
    #+END_SRC


*** lsp-mode, lsp-ui and lsp-language specific pacakges
    LSP support
    #+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands lsp
  :init
  ;; (setq ...)
)

(use-package lsp-ui :commands lsp-ui-mode)
(use-package company-lsp :commands company-lsp)

(require 'lsp-java)
(add-hook 'java-mode-hook #'lsp)

(add-hook 'after-init-hook #'global-flycheck-mode)
    #+END_SRC
   
*** ivy
    Use ivy for selecting things, also add recent files and bookmarks to the list and set a custom date format.
    #+BEGIN_SRC emacs-lisp
(use-package ivy :ensure t
  :diminish (ivy-mode . "")
  :bind
  (:map ivy-mode-map
   ("C-'" . ivy-avy))
  :config
  (ivy-mode 1)
  ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
  (setq ivy-use-virtual-buffers t)
  ;; number of result lines to display
  (setq ivy-height 10)
 ;; set a default count format
  (setq ivy-count-format "%d/%d")
  ;; no regexp by default
  ;; (setq ivy-initial-inputs-alist nil)
  ;; configure regexp engine.
  (setq ivy-re-builders-alist
	;; allow input not in order
        '((t   . ivy--regex-ignore-order))))

    #+END_SRC

*** which-key
    Display help on partially entered commands (prefix), also enable support for god-mode
    #+BEGIN_SRC emacs-lisp
(use-package which-key :demand)
(which-key-mode)
(which-key-enable-god-mode-support)
    #+END_SRC
    
*** spaceline
    Show a nicer mode-line
    #+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t
  :init
  (require 'spaceline-config)
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
  (setq powerline-default-separator 'slant)
  (setq evil-normal-state-tag "NORMAL")
  (setq evil-insert-state-tag "INSERT")
  (setq evil-visual-state-tag "VISUAL")
  (setq evil-emacs-state-tag "EMACS")
  :config
  (progn
    (spaceline-define-segment buffer-id
      (if (buffer-file-name)
          (let ((project-root (projectile-project-p)))
            (if project-root
                (file-relative-name (buffer-file-name) project-root)
              (abbreviate-file-name (buffer-file-name))))
        (powerline-buffer-id)))
    (spaceline-spacemacs-theme)
    (spaceline-toggle-minor-modes-off)))
    #+END_SRC
    
* Keyboard mappings

  #+BEGIN_SRC emacs-lisp
  #+END_SRC

* TODO
** Packaes I want to add/look into
   - use-package
   - evil-leader
   - magit 
** Some ideas (taken from https://medium.com/@CBowdon/pinching-the-best-bits-from-spacemacs-869b8c793ad3)
   - Try eglot instaed of lsp-mode https://github.com/cbowdon/Config/blob/master/emacs/init.org
   - Make package titles in this doc to links to the gitbhub repos
   - A shortcut to edit my init file (a literate init file with Org mode, which is great).
   - One key departure from Spacemacs: adding special modes like dired and VC to the evil-emacs-state-map, so that it uses the (usually consistent and mnemonic) default key bindings for those modes instead of mixing with Evil unpredictably.
   - Using a mnemonic key mapping, e.g. keeping VC commands under leader-v and shell commands under leader-s.
   - reference Spacemacs to get ideas for language-specific packages to install.
