* Appearance
  Removes the menu,tool and scrollbars along with the splash-screen.

  #+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-splash-screen t)
  #+END_SRC

* General Options
  Enable relative line numbers, disable the creation of file-backups when editing.

  #+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
(setq make-backup-files nil)
(setq-default display-line-numbers 'relative
    display-line-numbers-current-absolute t)
  #+END_SRC

* Packages
** Repositorys
   Get packages from MELPA too.
   #+BEGIN_SRC emacs-lisp
 (require 'package)
 (setq package-archives
       '(("gnu" . "https://elpa.gnu.org/packages/")
         ("melpa" . "https://melpa.org/packages/")
         ("melpa-stable" . "https://stable.melpa.org/packages/")))
 (package-initialize)
   #+END_SRC

   From here-on out =use-package= loads packages. We almost always want to =:ensure= packages are present.
   #+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))

   (require 'use-package)
   (setq use-package-always-ensure t)
   #+END_SRC

** Installed Packages
   The extensible vi layer for Emacs. 

*** [[https://github.com/emacs-evil/evil][evil-mode]]
    #+BEGIN_SRC emacs-lisp
(use-package evil
  :demand
  :config (progn
            (evil-mode 1)
            (define-key evil-normal-state-map (kbd ";") 'evil-ex)
	    (define-key evil-motion-state-map (kbd ":") 'evil-repeat-find-char)
            (define-key evil-visual-state-map (kbd ";") 'evil-ex)))
    #+END_SRC
    
    # *** [[https://github.com/cofi/evil-leader][evil-leader]]
    #     The package with the best name ever provides vim's leader key functinality
    #     #+BEGIN_SRC emacs-lisp
    # (use-package evil-leader
    #   :demand
    #   :config (progn
    #             (setq evil-leader/in-all-states t)
    #             (global-evil-leader-mode)))
            
    # (evil-leader/set-leader "`")
    # (setq-default indent-tabs-mode nil)
    #     #+END_SRC

*** [[https://github.com/Somelauw/evil-org-mode][evil-org]]
    ![An extensible vi layer for Emacs](https://raw.githubusercontent.com/emacs-evil/evil/master/doc/logo.png)
    #+BEGIN_SRC emacs-lisp
(use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
    #+END_SRC

*** [[https://github.com/linktohack/evil-commentary][evil-commentray]]
    Toggle comments in evil-mode
    #+BEGIN_SRC emacs-lisp
(use-package evil-commentary
  :ensure t
  :config
  (evil-commentary-mode))
    #+END_SRC

*** [[https://github.com/company-mode/company-mode][company-mode]]
    Modular in-buffer completion framework for Emacs
    #+BEGIN_SRC emacs-lisp
(use-package company
  :demand
  :config (progn
            (add-hook 'prog-mode-hook #'(lambda () (company-mode)))
            (setq company-show-numbers t))
	    (add-hook 'after-init-hook 'global-company-mode))
    #+END_SRC

*** [[https://github.com/joaotavora/yasnippet][yasnippet]]
    A template system for Emacs
    #+BEGIN_SRC emacs-lisp
 (use-package yasnippet
:ensure t
:init
(yas-global-mode 1))   
(defvar company-mode/enable-yas t
  "Enable yasnippet for all backends.")

(defun company-mode/backend-with-yas (backend)
  (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
      backend
    (append (if (consp backend) backend (list backend))
            '(:with company-yasnippet))))
	    
(setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))

    #+END_SRC
    
   
    
*** [[https://github.com/sabof/org-bullets][org-bullets]]
    Make the bullets in org-mode look nicer with UTF-8 characters
    #+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :demand
  :config 
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
)
    #+END_SRC

*** [[https://github.com/flycheck/flycheck][flycheck]]
    On the fly syntax checking
    #+BEGIN_SRC emacs-lisp
 (use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
    #+END_SRC

*** [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]
    LSP support
    #+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands lsp
  :init
  ;; (setq ...)
)

(add-hook 'after-init-hook #'global-flycheck-mode)
    #+END_SRC
*** [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]]
    This contains all the higher level UI modules of lsp-mode, like flycheck support and code lenses.
    #+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :config
  (setq lsp-ui-sideline-enable t
        lsp-ui-doc-enable nil
        lsp-ui-flycheck-enable t
        lsp-ui-imenu-enable t
        lsp-ui-sideline-ignore-duplicate t))
(provide 'setup-lsp)
    #+END_SRC
    
*** [[https://github.com/tigersoldier/company-lsp][company-lsp]]
    #+BEGIN_SRC emacs-lisp
(use-package company-lsp :commands company-lsp)
    (push 'company-lsp company-backends)
    #+END_SRC
*** [[https://github.com/emacs-lsp/lsp-java][lsp-java]]
    lsp-mode support for java
    #+BEGIN_SRC emacs-lisp
(use-package lsp-java :ensure t :after lsp
  :config (add-hook 'java-mode-hook 'lsp))
    #+END_SRC
    
*** [[https://github.com/abo-abo/swiper][ivy/swiper/counsel]]
    Use ivy for selecting things, also add recent files and bookmarks to the list and set a custom date format.
    #+BEGIN_SRC emacs-lisp
(use-package counsel :ensure t
  :bind
  :config
  (ivy-mode 1)
  ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
  (setq ivy-use-virtual-buffers t)
  ;; number of result lines to display
  (setq ivy-height 10)
 ;; set a default count format
  (setq ivy-count-format "%d/%d")
  ;; no regexp by default
  ;; (setq ivy-initial-inputs-alist nil)
  ;; configure regexp engine.
  (setq ivy-re-builders-alist
	;; allow input not in order
        '((t   . ivy--regex-ignore-order))))
    #+END_SRC
   
*** [[ahttps://github.com/justbur/emacs-which-key][which-key]]
    Emacs package that displays available keybindings in popup
    #+BEGIN_SRC emacs-lisp
(use-package which-key :demand)
(which-key-mode)
(which-key-enable-god-mode-support)
    #+END_SRC
    
*** [[https://github.com/TheBB/spaceline][spaceline]]
    Show a nicer mode-line
    #+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t
  :init
  (require 'spaceline-config)
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
  (setq powerline-default-separator 'slant)
  (setq evil-normal-state-tag "NORMAL")
  (setq evil-insert-state-tag "INSERT")
  (setq evil-visual-state-tag "VISUAL")
  (setq evil-emacs-state-tag "EMACS")
  :config
  (progn
    (spaceline-define-segment buffer-id
      (if (buffer-file-name)
          (let ((project-root (projectile-project-p)))
            (if project-root
                (file-relative-name (buffer-file-name) project-root)
              (abbreviate-file-name (buffer-file-name))))
        (powerline-buffer-id)))
    (spaceline-spacemacs-theme)
    (spaceline-toggle-minor-modes-off)))
    #+END_SRC
    
*** [[https://github.com/dgutov/diff-hl][diff-hl]]
    Show git diff gutter
    #+BEGIN_SRC emacs-lisp
    (use-package diff-hl
  :ensure t
  :config
  (global-diff-hl-mode +1)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
(add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
    #+END_SRC
*** [[https://github.com/noctuid/general.el][general.el]]
    More convenient key definitions in emacs
    #+BEGIN_SRC emacs-lisp
         (general-define-key
      :states '(normal visual insert emacs)
      :prefix "SPC"
      :non-normal-prefix "M-SPC"
       ;; General stuff
       "SPC" '(counsel-M-x :which-key "M-x")
       "ESC" 'keyboard-quit
       "/" '(counsel-ag :wich-key "ag")
       "." '(avy-goto-word-or-subword-1  :which-key "go to word")
       ;; "a" '(hydra-launcher/body :which-key "Applications")
       ;; "b" '(hydra-buffer/body t :which-key "Buffer")
       "c" '(:ignore t :which-key "comment")
       "cl" '(comment-or-uncomment-region-or-line :which-key "comment line")
       ;; "w" '(hydra-window/body :which-key "Window")
       
       ;; Files
       "f" '(:ignore t :which-key "files")
       "fd" '(counsel-git :which-key "find in git dir")
       "ff" '(counsel-find-file :which-key "open file")
       "fr" '(counsel-recentf :which-key "recent-files")
       
       ;; Applicartions
       "a" '(:ignore t :which-key "applications")
       
       ;; Configs
       "c" '(:ignore t :which-key "configs")
       
       ;; Windows
       "w" '(:ignore t :which-key "windows")
       "wd" '(delete-window :which-key "delete window")
       "ws" '(split-window-right :which-key "split vertical")
       "wS" '(split-window-below :which-key "split horizontal")
       
       ;; Buffers TODO edit, eval..
       "b" '(:ignore t :which-key "buffers")
       "TAB" '(ivy-switch-buffer :which-key "switch buffer")
       ;; Projects
       "p" '(:ignore t :which-key "projects")
       )
    #+END_SRC
* Keyboard mappings
  #+BEGIN_SRC emacs-lisp
  #+END_SRC

* TODO 
** packages missing from use-package
*** TODO counsel
*** TODO general.el
** Packaes I want to add/look into
*** DONE use-package
*** DONE evil-leader (Dont need it for now)
*** TODO evil-textobj-between.el
*** TODO projectile
*** TODO magit 
** Some ideas (taken from https://medium.com/@CBowdon/pinching-the-best-bits-from-spacemacs-869b8c793ad3)
*** TODO Try eglot instaed of lsp-mode https://github.com/cbowdon/Config/blob/master/emacs/init.org
*** TODO Make package titles in this doc to links to the gitbhub repos
*** TODO A shortcut to edit my init file (a literate init file with Org mode, which is great).
*** TODO One key departure from Spacemacs: adding special modes like dired and VC to the evil-emacs-state-map, so that it uses the (usually consistent and mnemonic) default key bindings for those modes instead of mixing with Evil unpredictably.
*** TODO Using a mnemonic key mapping, e.g. keeping VC commands under leader-v and shell commands under leader-s.
*** TODO reference Spacemacs to get ideas for language-specific packages to install.
