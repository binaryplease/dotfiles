* Repositories
  From here-on out =use-package= loads packages. We almost always want to =:ensure= packages are present.
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t)
    (setq backup-directory-alist
          `(("." . ,(concat user-emacs-directory "emacs-backups"))))
  #+END_SRC

* Appearance
  Removes the menu,tool and scrollbars along with the splash-screen.

  #+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (setq inhibit-splash-screen t)
  #+END_SRC

* General Options
  Enable relative line numbers, disable the creation of file-backups when editing.
  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode 1)                                ;; Highlight current line
    (setq make-backup-files nil)                           ;; Don't make backup files when editing
    (setq-default display-line-numbers 'relative           ;; Display relative line-numbers
                  display-line-numbers-current-absolute t) ;; Show absolute line number for current line
    (show-paren-mode 1)                                    ;; Show matching parenthesis
    (setq show-paren-delay 0)                              ;; Show it immediately, don't delay
  #+END_SRC

  Use UTF-8 by default
  #+BEGIN_SRC emacs-lisp :tangle yes
    (prefer-coding-system        'utf-8)
    (set-language-environment    'utf-8)
    (set-default-coding-systems  'utf-8)
    (set-terminal-coding-system  'utf-8)
    (set-selection-coding-system 'utf-8)
  #+END_SRC

  Indentation and trailing whitespace
  #+BEGIN_SRC emacs-lisp :tangle yes
    (setq standard-indent 2)
    (setq-default tab-width 2)
    (setq-default indent-tabs-mode nil)
    (setq show-trailing-whitespace t)
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
  #+END_SRC

    Personal information
  #+BEGIN_SRC emacs-lisp :tangle yes
    (setq user-full-name "Pablo Ovelleiro Corral"
          user-mail-address "pablo1@mailbox.org")
  #+END_SRC

  Integrate pass for password-management
  #+BEGIN_SRC emacs-lisp :tangle yes
    (require 'auth-source-pass)
    (auth-source-pass-enable)
  #+END_SRC


#+BEGIN_SRC emacs-lisp :tangle yes
  ;;;;; Scrolling
  ;; Default behaviour when point goes off screen is to scroll until
  ;; point is in the middle of the screen. This is hard to follow
  ;; for me, so I change the settings so that emacs only scrolls
  ;; line by line.

  ;; =scroll-conservatively= is still 0, but the low values of
  ;; =scroll-(up|down)-aggressively= ensure the smooth scrolling.
  (setq-default scroll-margin 3
          scroll-conservatively 0
          scroll-up-aggressively 0.01
          scroll-down-aggressively 0.01)

  ;;;;; Sentences end with .
  (setq sentence-end-double-space nil)

  ;;;;; Default fill column
  (setq default-fill-column 80)

  ;;;;; Initial startup message
  ;; (setq initial-scratch-message "Startup finished !")

  ;;;;; Initial buffer
  (setq remember-notes-initial-major-mode 'org-mode)
  (setq remember-data-file "~/org/notes.org")
  ;; (setq initial-buffer-choice 'remember-notes)

#+END_SRC

* Installed Packages
  The extensible vi layer for Emacs.
*** [[https://github.com/emacs-evil/evil][evil-mode]]
    #+BEGIN_SRC emacs-lisp
      (use-package evil
        :ensure t
        :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
                  :config (progn
                            (evil-mode 1)                                                         ;; Enable evil mode everywhere
                            (define-key evil-normal-state-map (kbd ";") 'evil-ex)                 ;; Swap ; and : for easier command entering (normal mode)
                            (define-key evil-visual-state-map (kbd ";") 'evil-ex)                 ;; Swap ; and : for easier command entering (visual mode)
                            (define-key evil-motion-state-map (kbd ":") 'evil-repeat-find-char))) ;; I don't use this much, but map it for completeness

    #+END_SRC
*** [[https://github.com/emacs-evil/evil-collection][evil-collection]]
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package evil-collection
        :after evil
        :ensure t
        :custom
        (evil-collection-setup-minibuffer t)
        :config
        (setq evil-collection-mode-list (delete 'dired evil-collection-mode-list))
        (evil-collection-init))
    #+END_SRC
*** [[https://github.com/Somelauw/evil-org-mode][evil-org]]
    Evil bindings for org-mode
    #+BEGIN_SRC emacs-lisp
      (use-package evil-org
        :ensure t
        :after org
        :after evil
        :config
        (add-hook 'org-mode-hook 'evil-org-mode)
        (add-hook 'evil-org-mode-hook
                  (lambda ()
                    (evil-org-set-key-theme)))
        (require 'evil-org-agenda)
        (evil-org-agenda-set-keys))
    #+END_SRC

*** [[https://github.com/emacs-evil/evil-magit][evil-magit]]
    Evil keybingings for magit
    #+BEGIN_SRC emacs-lisp :tangle yes
          (use-package evil-magit)
    #+END_SRC

*** [[https://github.com/linktohack/evil-commentary][evil-commentary]]
    Toggle comments in evil-mode
    #+BEGIN_SRC emacs-lisp
      (use-package evil-commentary
        :after evil
        :ensure t
        :config
        (evil-commentary-mode))
    #+END_SRC

*** [[https://github.com/company-mode/company-mode][company-mode]]
    Modular in-buffer completion framework for Emacs
    #+BEGIN_SRC emacs-lisp
      (use-package company
        :demand
        :config (progn
                  (add-hook 'prog-mode-hook #'(lambda () (company-mode)))
                  (setq company-show-numbers t))
        (add-hook 'after-init-hook 'global-company-mode))
    #+END_SRC

*** [[https://github.com/joaotavora/yasnippet][yasnippet]]
    A template system for Emacs
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :ensure t
        :init
        (yas-global-mode 1))
      (defvar company-mode/enable-yas t
        "Enable yasnippet for all backends.")

      (defun company-mode/backend-with-yas (backend)
        (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
            backend
          (append (if (consp backend) backend (list backend))
                  '(:with company-yasnippet))))
      (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
    #+END_SRC

*** [[https://github.com/sabof/org-bullets][org-bullets]]
    Make the bullets in org-mode look nicer with UTF-8 characters
    #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :demand
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC

*** [[https://github.com/flycheck/flycheck][flycheck]]
    On the fly syntax checking
    #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init (global-flycheck-mode))
    #+END_SRC

*** [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]
    LSP support
    #+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      :commands lsp
      :init
											;; (setq ...)
    )
    (add-hook 'after-init-hook #'global-flycheck-mode)
    #+END_SRC

*** [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]]
    This contains all the higher level UI modules of lsp-mode, like flycheck support and code lenses.
    #+BEGIN_SRC emacs-lisp
    (use-package lsp-ui
      :config
      (setq lsp-ui-sideline-enable t
        lsp-ui-doc-enable nil
        lsp-ui-flycheck-enable t
        lsp-ui-imenu-enable t
        lsp-ui-sideline-ignore-duplicate t))
    (provide 'setup-lsp)
    #+END_SRC

*** [[https://github.com/tigersoldier/company-lsp][company-lsp]]
    #+BEGIN_SRC emacs-lisp
    (use-package company-lsp :commands company-lsp)
    (push 'company-lsp company-backends)
    #+END_SRC

*** [[https://github.com/lassik/emacs-format-all-the-code][format-all]]
Auto-format source code in many languages with one command
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package format-all
      :ensure t)
    #+END_SRC

*** [[https://github.com/emacs-lsp/lsp-java][lsp-java]]
    lsp-mode support for java
    #+BEGIN_SRC emacs-lisp
    (use-package lsp-java :ensure t :after lsp
      :config (add-hook 'java-mode-hook 'lsp))
    #+END_SRC

*** [[https://github.com/abo-abo/swiper][ivy/swiper/counsel]]
    Use ivy for selecting things, also add recent files and bookmarks to the list and set a custom date format.
    #+BEGIN_SRC emacs-lisp
    (use-package counsel :ensure t
      :bind
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)							;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
      (setq ivy-height 10)								;; number of result lines to display
      (setq ivy-count-format "%d/%d ")							;; set a default count format
											;; (setq ivy-initial-inputs-alist nil) ;; no regexp by default
      (setq ivy-re-builders-alist
        '((t   . ivy--regex-fuzzy))))							;; configure regexp engine to use fuzzy finding
    #+END_SRC

*** [[https://github.com/lewang/flx][flx]]
    #+BEGIN_SRC emacs-lisp
      (use-package flx
        :ensure t
        :config
        (setq ivy-initial-inputs-alist nil)
        )
    #+END_SRC
*** [[ahttps://github.com/justbur/emacs-which-key][which-key]]
    Emacs package that displays available keybindings in popup
    #+BEGIN_SRC emacs-lisp
    (use-package which-key :demand)
    (which-key-mode)
    (which-key-enable-god-mode-support)
    #+END_SRC

*** [[https://github.com/TheBB/spaceline][spaceline]]
    Show a nicer mode-line
    #+BEGIN_SRC emacs-lisp
      (use-package spaceline
	:ensure t
	:init
	(require 'spaceline-config)
	(setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
	(setq powerline-default-separator 'slant)
	(setq evil-normal-state-tag "NORMAL")
	(setq evil-insert-state-tag "INSERT")
	(setq evil-visual-state-tag "VISUAL")
	(setq evil-emacs-state-tag "EMACS")
	:config
	(progn
	  (										;; spaceline-define-segment buffer-id
											;;  ( if (buffer-file-name)
											;;       (let ((project-root (projectile-project-p)))
											;;         (if project-root
											;;             (file-relative-name (buffer-file-name) project-root)
											;;           (abbreviate-file-name (buffer-file-name))))
											;;     (powerline-buffer-id)
											;; 	)
	    )
	  (spaceline-spacemacs-theme)
	  (spaceline-toggle-minor-modes-off)))
    #+END_SRC

*** [[https://github.com/dgutov/diff-hl][diff-hl]]
    Show git diff gutter
    #+BEGIN_SRC emacs-lisp
    (use-package diff-hl
	:ensure t
	:config
	(global-diff-hl-mode +1)
	(add-hook 'dired-mode-hook 'diff-hl-dired-mode)
	(add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
    #+END_SRC




*** [[https://github.com/politza/pdf-tools][pdf-tools]]
    #+BEGIN_SRC emacs-lisp :tangle yes

      (use-package pdf-tools
        :ensure t
        :config
        (pdf-tools-install)
        (setq-default pdf-view-display-size 'fit-page)
        ;; (bind-keys :map pdf-view-mode-map
        ;;     ("\\" . hydra-pdftools/body)
        ;;     ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
        ;;     ("g"  . pdf-view-first-page)
        ;;     ("G"  . pdf-view-last-page)
        ;;     ("l"  . image-forward-hscroll)
        ;;     ("h"  . image-backward-hscroll)
        ;;     ("j"  . pdf-view-next-page)
        ;;     ("k"  . pdf-view-previous-page)
        ;;     ("e"  . pdf-view-goto-page)
        ;;     ("u"  . pdf-view-revert-buffer)
        ;;     ("al" . pdf-annot-list-annotations)
        ;;     ("ad" . pdf-annot-delete)
        ;;     ("aa" . pdf-annot-attachment-dired)
        ;;     ("am" . pdf-annot-add-markup-annotation)
        ;;     ("at" . pdf-annot-add-text-annotation)
        ;;     ("y"  . pdf-view-kill-ring-save)
        ;;     ("i"  . pdf-misc-display-metadata)
        ;;     ("s"  . pdf-occur)
        ;;     ("b"  . pdf-view-set-slice-from-bounding-box)
        ;;     ("r"  . pdf-view-reset-slice)
        ;; )
      (use-package org-pdfview :ensure t))
    #+END_SRC
*** [[https://github.com/noctuid/general.el][general.el]]
    More convenient key definitions in emacs
    #+BEGIN_SRC emacs-lisp
      (use-package general
      :ensure t
      :init
      (setq general-override-states '(insert
                                    emacs
                                    hybrid
                                    normal
                                    visual
                                    motion
                                    operator
                                    replace))


      :config
      (general-define-key
        :states '(normal visual insert emacs motion)
        :keymaps 'override
        :prefix "SPC"
        :non-normal-prefix "M-SPC"
                        ;; General stuff
         "SPC"	'(counsel-M-x :which-key "M-x")
         "ESC"	'keyboard-quit
         "/"	'(counsel-ag :wich-key "ag")
         "."	'(avy-goto-word-or-subword-1  :which-key "go to word")
                        ;; "a"	'(hydra-launcher/body :which-key "Applications")
                        ;; "b"	'(hydra-buffer/body t :which-key "Buffer")
         "c"	'(:ignore t :which-key "comment")
         "cl"	'(comment-or-uncomment-region-or-line :which-key "comment line")
                        ;; "w"	'(hydra-window/body :which-key "Window")

                        ;; Files
         "f"	'(:ignore t :which-key "files")
         "fd"	'(counsel-git :which-key "find in git dir")
         "ff"	'(counsel-find-file :which-key "open file")
         "fr"	'(counsel-recentf :which-key "recent-files")

                        ;; Applicartions
         "a"	'(:ignore t :which-key "Applications")
         "g"	'(:ignore t :which-key "Git")

                        ;; Configs
         "c"	'(:ignore t :which-key "Config")

                        ;; Windows
         "w"	'(:ignore t :which-key "Window")
         "wd"	'(delete-window :which-key "delete window")
         "ws"	'(split-window-right :which-key "split vertical")
         "wS"	'(split-window-below :which-key "split horizontal")

                        ;; Buffers TODO edit, eval..
         "b"	'(:ignore t :which-key "Buffer")
         "bd"	'(kill-buffer-and-window :which-key "kill buffer and window")
         "TAB"	'(ivy-switch-buffer :which-key "switch buffer")
                        ;; Projects
         "p" '(:ignore t :which-key "Project")
         "pp" '(counsel-projectile :which-key "Switch project")
         "pf" '(counsel-projectile-find-file :which-key "Project file")
         "p/" '(counsel-projectile-ag :which-key "Search project")



         ))
    #+END_SRC
*** [[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashbord]]
    Display a startup dashboard
    #+BEGIN_SRC emacs-lisp
        (use-package dashboard
      :ensure t
      :config
      (dashboard-setup-startup-hook))
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
      (setq dashboard-items '((recents  . 5)
          (bookmarks . 5)
          (projects . 5)
          (agenda . 5)
          ;; (registers . 5)
      ))

      (setq dashboard-banner-logo-title "Happy hacking.")				;; Set the title
      (setq dashboard-startup-banner "~/.emacs.d/pc.png")				;; Set the banner
      (setq dashboard-center-content t)						;; Center content
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    #+END_SRC

*** [[https://github.com/bbatsov/projectile][projectile]]
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package projectile
        :bind-keymap
        ;; ("C-c p" . projectile-command-map)
        :config
        (setq projectile-project-search-path '("~/Projects/" "~/Documents/" "~/org-files")))
      (projectile-mode +1)
    #+END_SRC


*** [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]]
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package counsel-projectile
        :ensure t
        :config
        (counsel-projectile-mode))
    #+END_SRC
*** magit

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package magit
        :ensure t
        :defer t
        :bind (("C-x g" . magit-status))
        ;; :config
        ;; (progn
    ;;       (defun inkel/magit-log-edit-mode-hook ()
    ;;   (setq fill-column 72)
    ;;   (flyspell-mode t)
    ;;   (turn-on-auto-fill))
    ;;       (add-hook 'magit-log-edit-mode-hook 'inkel/magit-log-edit-mode-hook)
    ;;       (defadvice magit-status (around magit-fullscreen activate)
    ;;   (window-configuration-to-register :magit-fullscreen)
    ;;   ad-do-it
    ;;   (delete-other-windows))
    ;;
    ;; )
        )


    #+END_SRC


*** Themes
    Also install some themes. I load gruvbox per default and switch sometimes.
    #+BEGIN_SRC emacs-lisp
      (use-package gruvbox-theme :ensure t :defer t)
      (use-package base16-theme :ensure t :defer t)
      (load-theme 'gruvbox-dark-hard t)

      (defun check-expansion ()
        (save-excursion
          (if (looking-at "\\_>") t
            (backward-char 1)
            (if (looking-at "\\.") t
              (backward-char 1)
              (if (looking-at "->") t nil)))))

      (defun do-yas-expand ()
        (let ((yas/fallback-behavior 'return-nil))
          (yas/expand)))

      (defun tab-indent-or-complete ()
        (interactive)
        (if (minibufferp)
            (minibuffer-complete)
          (if (or (not yas/minor-mode)
                  (null (do-yas-expand)))
              (if (check-expansion)
                  (company-complete-common)
                (indent-for-tab-command)))))

      (global-set-key [tab] 'tab-indent-or-complete)

      ;; Add yasnippet support for all company backends
      ;; https://github.com/syl20bnr/spacemacs/pull/179
      (defvar company-mode/enable-yas t
        "Enable yasnippet for all backends.")

      (defun company-mode/backend-with-yas (backend)
        (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
            backend
          (append (if (consp backend) backend (list backend))
                  '(:with company-yasnippet))))

      (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
    #+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (progn
      (setq beacon-blink-when-point-moves-vertically nil) ; default nil
      (setq beacon-blink-when-point-moves-horizontally nil) ; default nil
      (setq beacon-blink-when-buffer-changes t) ; default t
      (setq beacon-blink-when-window-scrolls t) ; default t
      (setq beacon-blink-when-window-changes t) ; default t
      (setq beacon-blink-when-focused nil) ; default nil

      (setq beacon-blink-duration 0.3) ; default 0.3
      (setq beacon-blink-delay 0.3) ; default 0.3
      (setq beacon-size 20) ; default 40
      ;; (setq beacon-color "yellow") ; default 0.5
      (setq beacon-color 0.5) ; default 0.5

      (add-to-list 'beacon-dont-blink-major-modes 'term-mode)

      (beacon-mode 1)))
#+END_SRC

* TODO
** Packaes I want to add/look into
*** TODO evil-textobj-between.el
** Stuff that doesn't work yet
*** Show yasnippets' snippets in company completion when typing
** Some ideas (taken from https://medium.com/@CBowdon/pinching-the-best-bits-from-spacemacs-869b8c793ad3)
*** TODO Try eglot instaed of lsp-mode https://github.com/cbowdon/Config/blob/master/emacs/init.org
*** TODO A shortcut to edit my init file (a literate init file with Org mode, which is great).
*** TODO One key departure from Spacemacs: adding special modes like dired and VC to the evil-emacs-state-map, so that it uses the (usually consistent and mnemonic) default key bindings for those modes instead of mixing with Evil unpredictably.
*** TODO Using a mnemonic key mapping, e.g. keeping VC commands under leader-v and shell commands under leader-s.
*** TODO reference Spacemacs to get ideas for language-specific packages to install.


k
